version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fintech_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Database (PostgreSQL)
  database:
    image: postgres:15-alpine
    container_name: fintech_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fintech_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../infrastructure/database/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services (Always Running)
  backend-api:
    build:
      context: ../../services/backend-api
      dockerfile: Dockerfile
      target: runner
    container_name: fintech_backend_api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://${DB_USER:-postgres}:/run/secrets/db_password@database:5432/${DB_NAME:-fintech_db}
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      FIREBASE_SERVICE_ACCOUNT_FILE: /run/secrets/firebase_service_account
      MARKET_DATA_SERVICE_URL: http://market-data:8001
      AI_SERVICE_URL: http://ai-engine:8002
      RISK_ENGINE_URL: http://risk-engine:8003
      PORTFOLIO_SERVICE_URL: http://portfolio-simulation:8004
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
      market-data:
        condition: service_started
    secrets:
      - db_password
      - jwt_secret
      - firebase_service_account

  market-data:
    build:
      context: ../../services/marketdata-ingestion
      dockerfile: Dockerfile
      target: runner
    container_name: fintech_market_data
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      PYTHONPATH: /app
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://${DB_USER:-postgres}:/run/secrets/db_password@database:5432/${DB_NAME:-fintech_db}
      ALPHA_VANTAGE_API_KEY_FILE: /run/secrets/alpha_vantage_api_key
      FINNHUB_API_KEY_FILE: /run/secrets/finnhub_api_key
      DATA_INGESTION_INTERVAL: ${DATA_INGESTION_INTERVAL:-300}
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    secrets:
      - db_password
      - alpha_vantage_api_key
      - finnhub_api_key

  # Engine Services (On-Demand)
  ai-engine:
    build:
      context: ../../services/ai-microservice-engine
      dockerfile: Dockerfile
      target: runner
    container_name: fintech_ai_engine
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      PYTHONPATH: /app
      OPENAI_API_KEY_FILE: /run/secrets/openai_api_key
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://${DB_USER:-postgres}:/run/secrets/db_password@database:5432/${DB_NAME:-fintech_db}
      AI_MODEL: ${AI_MODEL:-gpt-4}
    depends_on:
      redis:
        condition: service_healthy
    secrets:
      - db_password
      - openai_api_key

  risk-engine:
    build:
      context: ../../services/python-risk-engine
      dockerfile: Dockerfile
      target: runner
    container_name: fintech_risk_engine
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      PYTHONPATH: /app
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://${DB_USER:-postgres}:/run/secrets/db_password@database:5432/${DB_NAME:-fintech_db}
      RISK_CALCULATION_WORKERS: ${RISK_CALCULATION_WORKERS:-4}
    depends_on:
      redis:
        condition: service_healthy
    secrets:
      - db_password

  # Application Services
  portfolio-simulation:
    build:
      context: ../../services/portfolio-simulation
      dockerfile: Dockerfile
      target: runner
    container_name: fintech_portfolio_simulation
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      PYTHONPATH: /app
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://${DB_USER:-postgres}:/run/secrets/db_password@database:5432/${DB_NAME:-fintech_db}
      RISK_ENGINE_URL: http://risk-engine:8003
      MARKET_DATA_URL: http://market-data:8001
      SIMULATION_WORKERS: ${SIMULATION_WORKERS:-2}
    depends_on:
      redis:
        condition: service_healthy
      risk-engine:
        condition: service_healthy
      market-data:
        condition: service_healthy
    secrets:
      - db_password

secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  alpha_vantage_api_key:
    file: ./secrets/alpha_vantage_api_key.txt
  finnhub_api_key:
    file: ./secrets/finnhub_api_key.txt
  firebase_service_account:
    file: ./secrets/firebase_service_account.json

networks:
  default:
    name: fintech_network
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  market_data_cache:
  ai_models:
  risk_models:
  portfolio_data:
