# .render.yaml - BeginnerInvestorHub Deployment Configuration
# This file defines the complete microservices architecture for Render.com

# Database Services
databases:
  - name: fintech-postgres
    databaseName: fintech_db
    user: postgres
    plan: starter  # $7/month - upgrade to standard ($20) for production
    region: oregon
    
  - name: fintech-redis
    plan: starter  # $7/month - Redis cache
    maxmemoryPolicy: allkeys-lru
    region: oregon

# Core Services
services:
  # API Gateway - Main entry point
  - type: web
    name: backend-api-service
    runtime: node
    plan: starter  # $7/month - upgrade to standard ($25) for production
    region: oregon
    buildCommand: npm ci && npm run build
    startCommand: npm start
    rootDir: services/backend-api-service
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3000
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: FIREBASE_SERVICE_ACCOUNT
        fromGroup: secrets
      - key: ALPHA_VANTAGE_API_KEY
        fromGroup: secrets
      - key: FINNHUB_API_KEY
        fromGroup: secrets
      - key: OPENAI_API_KEY
        fromGroup: secrets
    healthCheckPath: /health
    autoDeploy: true
    
  # Market Data Ingestion Service
  - type: web
    name: market-data-service
    runtime: python
    plan: starter
    region: oregon
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    rootDir: services/market-data-ingestion-service
    envVars:
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: PYTHONUNBUFFERED
        value: 1
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: ALPHA_VANTAGE_API_KEY
        fromGroup: secrets
      - key: FINNHUB_API_KEY
        fromGroup: secrets
      - key: DATA_INGESTION_INTERVAL
        value: 300
    healthCheckPath: /health
    autoDeploy: true
    
  # AI Microservice Engine
  - type: web
    name: ai-engine
    runtime: python
    plan: standard  # $25/month - AI processing needs more resources
    region: oregon
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    rootDir: services/ai-microservice-engine
    envVars:
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: PYTHONUNBUFFERED
        value: 1
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: OPENAI_API_KEY
        fromGroup: secrets
      - key: AI_MODEL
        value: gpt-4o-mini  # More cost-effective for development
    healthCheckPath: /health
    autoDeploy: true
    
  # Risk Engine
  - type: web
    name: risk-engine
    runtime: python
    plan: standard  # $25/month - Heavy mathematical calculations
    region: oregon
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    rootDir: services/python-risk-engine
    envVars:
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: PYTHONUNBUFFERED
        value: 1
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: RISK_CALCULATION_WORKERS
        value: 2  # Limited by Render plan
    healthCheckPath: /health
    autoDeploy: true
    
  # Portfolio Simulation Service
  - type: web
    name: portfolio-simulation
    runtime: python
    plan: standard  # $25/month - Monte Carlo simulations
    region: oregon
    buildCommand: pip install -r requirements.txt
    startCommand: python app.py
    rootDir: services/portfolio-simulation-service
    envVars:
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: PYTHONUNBUFFERED
        value: 1
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: RISK_ENGINE_URL
        value: https://risk-engine.onrender.com
      - key: MARKET_DATA_URL
        value: https://market-data-service.onrender.com
      - key: SIMULATION_WORKERS
        value: 1  # Limited by Render plan
    healthCheckPath: /health
    autoDeploy: true
    
  # Frontend (Next.js)
  - type: web
    name: frontend
    runtime: node
    plan: starter
    region: oregon
    buildCommand: npm ci && npm run build
    startCommand: npm start
    rootDir: frontend
    envVars:
      - key: NODE_ENV
        value: production
      - key: NEXT_PUBLIC_API_URL
        value: https://backend-api-service.onrender.com
      - key: NEXTAUTH_URL
        value: https://beginnerinvestorhub.onrender.com
      - key: NEXTAUTH_SECRET
        fromGroup: secrets
    healthCheckPath: /
    autoDeploy: true

  # Background Jobs - Cron Jobs for data ingestion, nudges, etc.
  - type: cron
    name: data-ingestion-cron
    runtime: python
    plan: starter
    region: oregon
    buildCommand: pip install -r requirements.txt
    startCommand: python scripts/scheduled_ingestion.py
    rootDir: services/market-data-ingestion-service
    schedule: "*/5 * * * *"  # Every 5 minutes
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: ALPHA_VANTAGE_API_KEY
        fromGroup: secrets
      - key: FINNHUB_API_KEY
        fromGroup: secrets
        
  - type: cron
    name: behavioral-nudges-cron
    runtime: python
    plan: starter
    region: oregon
    buildCommand: pip install -r requirements.txt
    startCommand: python scripts/generate_nudges.py
    rootDir: services/behavioral-nudge-engine
    schedule: "0 9,15 * * *"  # 9 AM and 3 PM daily
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: fintech-postgres
          property: connectionString
      - key: REDIS_URL
        fromDatabase:
          name: fintech-redis
          property: connectionString
      - key: BACKEND_API_URL
        value: https://backend-api-service.onrender.com

# Environment Variable Groups
envVarGroups:
  - name: secrets
    envVars:
      - key: FIREBASE_SERVICE_ACCOUNT
        generateValue: false  # You'll set this manually
      - key: ALPHA_VANTAGE_API_KEY
        generateValue: false
      - key: FINNHUB_API_KEY
        generateValue: false
      - key: OPENAI_API_KEY
        generateValue: false
      - key: NEXTAUTH_SECRET
        generateValue: true   # Render will generate this
      - key: JWT_SECRET
        generateValue: true
      - key: STRIPE_SECRET_KEY
        generateValue: false  # For future paywall implementation
      - key: STRIPE_WEBHOOK_SECRET
        generateValue: false

# Static Site for Documentation (optional)
staticSites:
  - name: documentation
    buildCommand: npm run build-docs
    publishPath: docs/build
    rootDir: docs
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    envVars:
      - key: NODE_ENV
        value: production

# Notification Rules
alerting:
  - service: backend-api-service
    rule: response_time_p95 > 2000
    channels:
      - email: your-email@domain.com
  - service: ai-engine
    rule: response_time_p95 > 5000
    channels:
      - email: your-email@domain.com
  - database: fintech-postgres
    rule: cpu_usage > 80
    channels:
      - email: your-email@domain.com