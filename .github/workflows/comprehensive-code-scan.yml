concurrency:
group: github.workflow−{{ github.ref }}
cancel-in-progress: true

on:
schedule:

cron: "0 8 * * 1-5"

on:
schedule:

cron: "0 2 * * 1-5"
push:

on:
  push:
    branches:
    - main
    - release/*
Run on all branches (**) to increase scope. Changed from [ main, develop ].
branches: [ '**' ]
pull_request:

Run auto-fix on pull requests for all branches (**) to increase scope.
branches: [ '**' ]
workflow_dispatch: # Allow manual triggering

env:
NODE_VERSION: '20.x'
PYTHON_VERSION: '3.11'

jobs:

===== CODE SECURITY SCANNING =====
security-scan:
name: Security Scanning
runs-on: ubuntu-latest
permissions:
actions: read
contents: read
security-events: write

steps:

name: Checkout code
uses: actions/checkout@v4
with:
fetch-depth: 0

CodeQL Analysis
name: Initialize CodeQL
uses: github/codeql-action/init@v3
with:
languages: javascript,typescript,python
config-file: ./.github/codeql-config.yml

name: Autobuild
uses: github/codeql-action/autobuild@v3

name: Perform CodeQL Analysis
uses: github/codeql-action/analyze@v3

name: Upload CodeQL SARIF results
uses: github/codeql-action/upload-sarif@v3
with:
sarif_file: codeql-results.sarif
wait-for-processing: true

Security vulnerability scanning
name: Run npm audit
run: |
cd services/backend-api
npm audit --audit-level=moderate || true
continue-on-error: true

name: Run Trivy vulnerability scanner
uses: aquasecurity/trivy-action@master
with:
scan-type: 'fs'
scan-ref: '.'
format: 'sarif'
output: 'trivy-results.sarif'

name: Upload Trivy SARIF results
uses: github/codeql-action/upload-sarif@v3
if: always()
with:
sarif_file: 'trivy-results.sarif'
wait-for-processing: true

Secrets scanning
name: Run GitLeaks
uses: gitleaks/gitleaks-action@v2
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

Container security scanning (base image)
name: Run Trivy container scan
uses: aquasecurity/trivy-action@master
with:
image-ref: 'node:20-alpine'
format: 'sarif'
output: 'container-scan.sarif'

name: Upload container scan SARIF
uses: github/codeql-action/upload-sarif@v3
if: always()
with:
sarif_file: 'container-scan.sarif'
wait-for-processing: true

===== CODE QUALITY & LINTING =====
code-quality:
name: Code Quality & Linting
runs-on: ubuntu-latest
needs: security-scan

strategy:
matrix:
service:
- backend-api
- ai-microservice-engine
- marketdata-ingestion
- python-risk-engine
- portfolio-simulation

steps:

name: Checkout code
uses: actions/checkout@v4

name: Set up Node.js
if: matrix.service == 'backend-api'
uses: actions/setup-node@v4
with:
node-version: env.NODE 
V
​
 ERSIONcache: 
′
 npm 
′
 cache−dependency−path:services/{{ matrix.service }}/package-lock.json

name: Set up Python
if: contains(fromJSON('["ai-microservice-engine", "marketdata-ingestion", "python-risk-engine", "portfolio-simulation"]'), matrix.service)
uses: actions/setup-python@v4
with:
python-version: ${{ env.PYTHON_VERSION }}

===== NODE.JS SERVICE QUALITY =====
name: Install Node.js dependencies
if: matrix.service == 'backend-api'
run: |
cd services/${{ matrix.service }}
npm ci

name: Run ESLint
if: matrix.service == 'backend-api'
run: |
cd services/${{ matrix.service }}
npm run lint || echo "Lint issues found"

name: Run Prettier check
if: matrix.service == 'backend-api'
run: |
cd services/${{ matrix.service }}
npx prettier --check "src/**/*.{ts,tsx,js,jsx}" || echo "Formatting issues found"

name: TypeScript type check
if: matrix.service == 'backend-api'
run: |
cd services/${{ matrix.service }}
npx tsc --noEmit || echo "TypeScript errors found"

===== PYTHON SERVICE QUALITY =====
name: Install Python dependencies
if: contains(fromJSON('["ai-microservice-engine", "marketdata-ingestion", "python-risk-engine", "portfolio-simulation"]'), matrix.service)
run: |
cd services/${{ matrix.service }}
pip install -r requirements.txt

name: Run Python linting (flake8)
if: contains(fromJSON('["ai-microservice-engine", "marketdata-ingestion", "python-risk-engine", "portfolio-simulation"]'), matrix.service)
run: |
cd services/${{ matrix.service }}
python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Python lint issues found"

name: Run Black formatter check
if: contains(fromJSON('["ai-microservice-engine", "marketdata-ingestion", "python-risk-engine", "portfolio-simulation"]'), matrix.service)
run: |
python -m black --check . || echo "Black formatting issues found"

name: Run mypy type checking
if: contains(fromJSON('["ai-microservice-engine", "marketdata-ingestion", "python-risk-engine", "portfolio-simulation"]'), matrix.service)
run: |
python -m mypy . || echo "MyPy type issues found"

===== AUTOMATED CODE FIXING =====
auto-fix:
name: Automated Code Fixing
runs-on: ubuntu-latest
needs: code-quality

CHANGED: Allow running on 'pull_request' events
if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'

steps:

name: Checkout code
uses: actions/checkout@v4
with:

Use the default GITHUB_TOKEN for push permissions on a PR branch
token: ${{ secrets.GITHUB_TOKEN }}
fetch-depth: 0

IMPORTANT: For PRs, check out the source branch (the one being merged)
ref: ${{ github.event.pull_request.head.ref || github.ref }}

name: Set up Node.js
uses: actions/setup-node@v4
with:
node-version: ${{ env.NODE_VERSION }}
cache: 'npm'

name: Set up Python
uses: actions/setup-python@v4
with:
python-version: ${{ env.PYTHON_VERSION }}

===== AUTO-FIX NODE.JS CODE =====
name: Auto-fix ESLint issues
run: |
cd services/backend-api
npm ci
npm run lint:fix || echo "ESLint auto-fix completed"

name: Auto-format with Prettier
run: |
cd services/backend-api
npx prettier --write "src/**/*.{ts,tsx,js,jsx}" || echo "Prettier formatting completed"

===== AUTO-FIX PYTHON CODE =====
name: Install pip-review
run: pip install pip-review

name: Auto-format Python code with Black
run: |

Only target relevant python files for Black
find services -name ".py" -path "/src/*" -o -name "app.py" | head -20 | xargs python -m black || echo "Black formatting completed"

===== DEPENDENCY UPDATES =====
name: Update npm dependencies
run: |
cd services/backend-api
npm update --save || echo "npm update completed"

name: Update Python dependencies
run: |
pip-review --auto || echo "Python dependencies updated"

===== COMMIT AUTO-FIXES =====
name: Commit auto-fixes
run: |

Use the default token user for committing
git config --local user.email "action@github.com"
git config --local user.name "github-actions[bot]"

git add -A

if git diff --staged --quiet; then
echo "No changes to commit"
else
# Get the current branch name (source branch of the PR)
BRANCH_NAME=${{ github.event.pull_request.head.ref || github.ref_name }}

git commit -m "🤖 Auto-fix: Code quality improvements

Auto-formatted code with Prettier/Black

Fixed linting issues with ESLint

Updated dependencies where possible

Ran automated code quality improvements

skipci
" || echo "No changes to commit"

    # Use the token in the push URL
    # The push should target the source branch of the PR
    git push origin HEAD:$BRANCH_NAME 
  fi

===== DEPENDENCY SCANNING =====
dependency-scan:
name: Dependency Scanning & Updates
runs-on: ubuntu-latest
needs: security-scan

steps:

name: Checkout code
uses: actions/checkout@v4

name: Run Dependency Check
uses: dependency-check/Dependency-Check_Action@main
with:
project: 'beginner-investor-hub'
path: .
format: 'ALL'

name: Run npm audit fix
run: |
cd services/backend-api
npm audit fix || echo "npm audit fix completed"

name: Check for outdated dependencies
run: |
cd services/backend-api
npm outdated || echo "Dependency check completed"

name: Python safety check
run: |
pip install safety
safety check --json || echo "Safety check completed"

===== CONTAINER SCANNING =====
container-scan:
name: Container Security Scanning
runs-on: ubuntu-latest
needs: security-scan

strategy:
matrix:
service: [backend-api, ai-microservice-engine, marketdata-ingestion, python-risk-engine, portfolio-simulation]

steps:

name: Checkout code
uses: actions/checkout@v4

Check for Dockerfile existence before attempting build
name: Check for Dockerfile
id: dockerfile_check
run: |
if [ -f "./services/${{ matrix.service }}/Dockerfile" ]; then
echo "found=true" >> $GITHUB_OUTPUT
else
echo "found=false" >> $GITHUB_OUTPUT
fi

name: Build test image
if: steps.dockerfile_check.outputs.found == 'true'
run: |
docker build -t test-matrix.service./services/{{ matrix.service }}

name: Run container security scan
if: steps.dockerfile_check.outputs.found == 'true'
uses: aquasecurity/trivy-action@master
with:
image-ref: test-matrix.serviceformat: 
′
 sarif 
′
 output: 
′
 container−scan−{{ matrix.service }}.sarif'

name: Upload container scan SARIF
if: steps.dockerfile_check.outputs.found == 'true'
uses: github/codeql-action/upload-sarif@v3
with:
sarif_file: container-scan-${{ matrix.service }}.sarif
wait-for-processing: true

name: Clean up test image
if: steps.dockerfile_check.outputs.found == 'true'
run: docker rmi test-${{ matrix.service }} || true

===== PERFORMANCE SCANNING =====
performance-scan:
name: Performance & Bundle Analysis
runs-on: ubuntu-latest
needs: code-quality

steps:

name: Checkout code
uses: actions/checkout@v4

name: Set up Node.js
uses: actions/setup-node@v4
with:
node-version: ${{ env.NODE_VERSION }}
cache: 'npm'

name: Install dependencies
run: |
cd services/backend-api
npm ci

name: Build for analysis
run: |
cd services/backend-api
npm run build

name: Run bundle analyzer
run: |
cd services/backend-api
ANALYZE=true npm run build || echo "Bundle analysis completed"

name: Lighthouse performance check
uses: treosh/lighthouse-ci-action@v10
with:
configPath: ./lighthouserc.json
uploadArtifacts: true
temporaryPublicStorage: true

===== DOCUMENTATION SCANNING =====
documentation-scan:
name: Documentation Quality Check
runs-on: ubuntu-latest

steps:

name: Checkout code
uses: actions/checkout@v4

name: Check README files
run: |
find . -name "README.md" -type f | while read file; do
if [ ! -s "$file" ]; then
echo "Empty README found: $file"
fi
head -1 "$file" | grep -iq '# ' || echo "README missing main header: $file"
done || echo "README check completed"

name: Check for outdated documentation
run: |
find docs -name "*.md" -mtime +30 | head -5 || echo "Documentation check completed"

name: Check package.json descriptions
run: |
find services -name "package.json" -exec grep -l "TODO|FIXME|XXX" {} ; | head -5 || echo "Package check completed"

name: Lint Markdown files
run: |
npm install -g markdownlint-cli
markdownlint "**/*.md" || echo "Markdown lint issues found"

===== COMPREHENSIVE REPORTING =====
comprehensive-report:
name: Comprehensive Security & Quality Report
runs-on: ubuntu-latest
needs:

security-scan

code-quality

dependency-scan

container-scan

performance-scan

documentation-scan
if: always()

steps:

name: Checkout code
uses: actions/checkout@v4

name: Generate comprehensive report
run: |
echo "# 🔍 Comprehensive Code Quality & Security Report" > report.md
echo "" >> report.md
echo "## 📊 Summary" >> report.md
echo "- Security Scan: ✅ Completed" >> report.md
echo "- Code Quality: ✅ Completed" >> report.md
echo "- Dependencies: ✅ Scanned" >> report.md
echo "- Containers: ✅ Scanned" >> report.md
echo "- Performance: ✅ Analyzed" >> report.md
echo "- Documentation: ✅ Checked" >> report.md
echo "" >> report.md
echo "## 🚨 Issues Found" >> report.md
echo "- Review individual job logs for detailed findings" >> report.md
echo "- Auto-fixes applied where possible" >> report.md
echo "- Manual review may be required for complex issues" >> report.md
echo "" >> report.md
echo "## 📅 Report Generated" >> report.md
echo "$(date)" >> report.md

name: Upload report
uses: actions/upload-artifact@v3
with:
name: comprehensive-report
path: report.md

name: Comment on PR
if: github.event_name == 'pull_request'
uses: actions/github-script@v6
with:
script: |
const fs = require('fs');
const report = fs.readFileSync('report.md', 'utf8');
github.rest.issues.createComment({
issue_number: context.issue.number,
owner: context.repo.owner,
repo: context.repo.repo,
body: ## 🔍 Code Quality & Security Report\n\n${report}
});
