# render.yaml - Render Blueprint for Beginner Investor Hub
# Redis: Caching + Rate Limiting | Firebase: Authentication | Learning Hub: AI-Powered Gamification
services:
  # Core Backend API - Entry point with Firebase auth
  - type: web
    name: backend-api-service
    env: node
    buildCommand: |
      npm install
      cd tools-restructured/services/backend-api && npm install
    startCommand: node tools-restructured/services/backend-api/server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      # Redis for caching and rate limiting
      - key: REDIS_URL
        fromService:
          type: redis
          name: beginner-investor-redis
          property: connectionString
      - key: REDIS_CACHE_TTL
        value: 300
      - key: REDIS_RATE_LIMIT_WINDOW
        value: 900
      - key: REDIS_RATE_LIMIT_MAX_REQUESTS
        value: 100
      # Firebase Authentication
      - key: FIREBASE_PROJECT_ID
        sync: false
      - key: FIREBASE_PRIVATE_KEY
        sync: false
      - key: FIREBASE_CLIENT_EMAIL
        sync: false
      - key: FIREBASE_WEB_API_KEY
        sync: false
      # Database
      - key: DATABASE_URL
        fromDatabase:
          name: beginner-investor-db
          property: connectionString
      # Internal service URLs
      - key: AI_MICROSERVICE_URL
        value: https://ai-microservice-engine.onrender.com
      - key: PORTFOLIO_SIMULATION_URL
        value: https://portfolio-simulation-service.onrender.com
      - key: MARKET_DATA_URL
        value: https://market-data-ingestion-service.onrender.com
      - key: CORS_ORIGIN
        sync: false
    healthCheckPath: /health
    
  # AI Microservice Engine - Powers AI behavioral nudge + Learning Hub
  - type: web
    name: ai-microservice-engine
    env: node
    buildCommand: |
      npm install
      cd tools-restructured/services/ai_microservice && npm install
    startCommand: node tools-restructured/services/ai_microservice/server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10001
      # Redis for caching AI responses and gamification data
      - key: REDIS_URL
        fromService:
          type: redis
          name: beginner-investor-redis
          property: connectionString
      - key: REDIS_AI_CACHE_TTL
        value: 3600
      - key: REDIS_LEARNING_CACHE_TTL
        value: 1800
      - key: REDIS_GAMIFICATION_TTL
        value: 86400
      - key: REDIS_OPENAI_RATE_LIMIT
        value: 60
      # OpenAI Configuration
      - key: OPENAI_API_KEY
        sync: false
      - key: MODEL_API_ENDPOINT
        value: https://api.openai.com/v1
      - key: OPENAI_MODEL
        value: gpt-4
      # Firebase for token verification
      - key: FIREBASE_PROJECT_ID
        sync: false
      # Learning Hub & Gamification
      - key: BEHAVIORAL_NUDGE_ENABLED
        value: true
      - key: LEARNING_HUB_ENABLED
        value: true
      - key: GAMIFICATION_ENABLED
        value: true
      # Database for user progress tracking
      - key: DATABASE_URL
        fromDatabase:
          name: beginner-investor-db
          property: connectionString
    healthCheckPath: /health

  # Python Risk Engine - Uses Redis for caching risk calculations
  - type: web
    name: python-risk-engine
    env: python
    buildCommand: |
      cd tools-restructured/services/python-engine
      pip install -r requirements.txt
    startCommand: python tools-restructured/services/python-engine/app.py
    envVars:
      - key: FLASK_ENV
        value: production
      - key: PORT
        value: 10002
      # Redis for caching risk calculations
      - key: REDIS_URL
        fromService:
          type: redis
          name: beginner-investor-redis
          property: connectionString
      - key: REDIS_RISK_CACHE_TTL
        value: 1800
      # Firebase for token verification
      - key: FIREBASE_PROJECT_ID
        sync: false
      - key: RISK_CALCULATION_ENABLED
        value: true
    healthCheckPath: /health

  # Market Data Ingestion - Uses Redis for caching market data
  - type: web
    name: market-data-ingestion-service
    env: node
    buildCommand: |
      npm install
      cd tools-restructured/services/market-data-ingestion && npm install
    startCommand: node tools-restructured/services/market-data-ingestion/server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10003
      # Redis for market data caching and rate limiting API calls
      - key: REDIS_URL
        fromService:
          type: redis
          name: beginner-investor-redis
          property: connectionString
      - key: REDIS_MARKET_DATA_TTL
        value: 60
      - key: REDIS_API_RATE_LIMIT
        value: 300
      # Database for persistent storage
      - key: DATABASE_URL
        fromDatabase:
          name: beginner-investor-db
          property: connectionString
      # Market Data APIs
      - key: ALPHA_VANTAGE_API_KEY
        sync: false
      - key: FINNHUB_API_KEY
        sync: false
      - key: MARKET_DATA_API_KEY
        sync: false
      # Firebase for admin operations
      - key: FIREBASE_PROJECT_ID
        sync: false
    healthCheckPath: /health

  # Portfolio Simulation - Uses Redis for caching simulations
  - type: web
    name: portfolio-simulation-service
    env: node
    buildCommand: |
      npm install
      cd tools-restructured/services/portfolio-simulation && npm install
    startCommand: node tools-restructured/services/portfolio-simulation/server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10004
      # Redis for caching portfolio simulations
      - key: REDIS_URL
        fromService:
          type: redis
          name: beginner-investor-redis
          property: connectionString
      - key: REDIS_SIMULATION_CACHE_TTL
        value: 600
      # Database for user portfolios
      - key: DATABASE_URL
        fromDatabase:
          name: beginner-investor-db
          property: connectionString
      # Dependent services
      - key: PYTHON_RISK_ENGINE_URL
        value: https://python-risk-engine.onrender.com
      - key: MARKET_DATA_URL
        value: https://market-data-ingestion-service.onrender.com
      # Firebase for user authentication
      - key: FIREBASE_PROJECT_ID
        sync: false
    healthCheckPath: /health

databases:
  # PostgreSQL Database for persistent data
  - name: beginner-investor-db
    databaseName: beginner_investor_hub
    user: postgres

  # Redis for caching, rate limiting, and gamification data
  - name: beginner-investor-redis
    type: redis

databases:
  # PostgreSQL Database
  - name: beginner-investor-db
    databaseName: beginner_investor_hub
    user: postgres

  # Redis Cache
  - name: beginner-investor-redis
    type: redis